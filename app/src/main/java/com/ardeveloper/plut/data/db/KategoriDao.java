package com.ardeveloper.plut.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KATEGORI".
*/
public class KategoriDao extends AbstractDao<Kategori, Void> {

    public static final String TABLENAME = "KATEGORI";

    /**
     * Properties of entity Kategori.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Nama = new Property(0, String.class, "nama", false, "NAMA");
        public final static Property Kode = new Property(1, String.class, "kode", false, "KODE");
        public final static Property Id = new Property(2, int.class, "id", false, "ID");
    }


    public KategoriDao(DaoConfig config) {
        super(config);
    }
    
    public KategoriDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KATEGORI\" (" + //
                "\"NAMA\" TEXT," + // 0: nama
                "\"KODE\" TEXT," + // 1: kode
                "\"ID\" INTEGER NOT NULL );"); // 2: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KATEGORI\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Kategori entity) {
        stmt.clearBindings();
 
        String nama = entity.getNama();
        if (nama != null) {
            stmt.bindString(1, nama);
        }
 
        String kode = entity.getKode();
        if (kode != null) {
            stmt.bindString(2, kode);
        }
        stmt.bindLong(3, entity.getId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Kategori entity) {
        stmt.clearBindings();
 
        String nama = entity.getNama();
        if (nama != null) {
            stmt.bindString(1, nama);
        }
 
        String kode = entity.getKode();
        if (kode != null) {
            stmt.bindString(2, kode);
        }
        stmt.bindLong(3, entity.getId());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Kategori readEntity(Cursor cursor, int offset) {
        Kategori entity = new Kategori( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // nama
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // kode
            cursor.getInt(offset + 2) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Kategori entity, int offset) {
        entity.setNama(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setKode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Kategori entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Kategori entity) {
        return null;
    }

    @Override
    public boolean hasKey(Kategori entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
