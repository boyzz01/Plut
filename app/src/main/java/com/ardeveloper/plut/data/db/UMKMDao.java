package com.ardeveloper.plut.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UMKM".
*/
public class UMKMDao extends AbstractDao<UMKM, Void> {

    public static final String TABLENAME = "UMKM";

    /**
     * Properties of entity UMKM.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", false, "ID");
        public final static Property Kode_kota = new Property(1, String.class, "kode_kota", false, "KODE_KOTA");
        public final static Property Nama = new Property(2, String.class, "nama", false, "NAMA");
        public final static Property Nib = new Property(3, Integer.class, "nib", false, "NIB");
        public final static Property KodeUmkm = new Property(4, String.class, "kodeUmkm", false, "KODE_UMKM");
    }


    public UMKMDao(DaoConfig config) {
        super(config);
    }
    
    public UMKMDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UMKM\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"KODE_KOTA\" TEXT," + // 1: kode_kota
                "\"NAMA\" TEXT," + // 2: nama
                "\"NIB\" INTEGER," + // 3: nib
                "\"KODE_UMKM\" TEXT);"); // 4: kodeUmkm
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UMKM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UMKM entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String kode_kota = entity.getKode_kota();
        if (kode_kota != null) {
            stmt.bindString(2, kode_kota);
        }
 
        String nama = entity.getNama();
        if (nama != null) {
            stmt.bindString(3, nama);
        }
 
        Integer nib = entity.getNib();
        if (nib != null) {
            stmt.bindLong(4, nib);
        }
 
        String kodeUmkm = entity.getKodeUmkm();
        if (kodeUmkm != null) {
            stmt.bindString(5, kodeUmkm);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UMKM entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String kode_kota = entity.getKode_kota();
        if (kode_kota != null) {
            stmt.bindString(2, kode_kota);
        }
 
        String nama = entity.getNama();
        if (nama != null) {
            stmt.bindString(3, nama);
        }
 
        Integer nib = entity.getNib();
        if (nib != null) {
            stmt.bindLong(4, nib);
        }
 
        String kodeUmkm = entity.getKodeUmkm();
        if (kodeUmkm != null) {
            stmt.bindString(5, kodeUmkm);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UMKM readEntity(Cursor cursor, int offset) {
        UMKM entity = new UMKM( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // kode_kota
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nama
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // nib
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // kodeUmkm
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UMKM entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setKode_kota(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNama(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNib(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setKodeUmkm(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UMKM entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UMKM entity) {
        return null;
    }

    @Override
    public boolean hasKey(UMKM entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
